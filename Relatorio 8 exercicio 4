
from ast import Return
from abc import ABC, abstractmethod

class Cibernetico(ABC):

    @abstractmethod
    def realizar_hack(self, alvo):
        pass
  

class Implante:
  #construtor
  def __init__(self, custo: int, funcao: str):
    self.custo = custo
    self.funcao = funcao


class NetRunner(Cibernetico):
  #construtor
  def __init__(self, implante: Implante):
    self.__implante = implante

  #metodos
  def get_implante(self):
    return self.__implante

  def realizar_hack(self, alvo: str):
    print(f"hackeando {alvo}...")


class Faccao(NetRunner):
  #construtor
  def __init__(self, faccao: list[Cibernetico]):
    self.faccao = faccao
  
  #metodos
  def HackGeral(self, alvo: str):
    for unit in self.faccao:
      unit.realizar_hack({alvo})


if __name__ == "__main__":
    print("--- Inicializando ---")

membro1 = NetRunner(Implante(100, "hackear bicicletas"))
membro2 = NetRunner(Implante(200, "pes turbo"))
membro3 = NetRunner(Implante(150, "visao no escuro mas s√≥ embaixo d'agua"))

ListaDaFaccao = Faccao([membro1, membro2, membro3])

ListaDaFaccao.HackGeral("carro")
